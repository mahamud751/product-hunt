generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  image           String?
  name            String
  email           String           @unique
  emailVerified   DateTime?
  isPremium       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  username        String?
  headline        String?
  about           String?
  socialLinks     Json?
  interests       String[]
  skills          String[]
  experiences     Json?
  education       Json?
  accounts        Account[]
  comments        Comment[]
  reviews         Review[]
  notifications   Notification[]
  products        Product[]
  sessions        Session[]
  upvotes         Upvote[]
  blogs           Blog[]
  helpfulComments CommentHelpful[]
  helpfulReviews  ReviewHelpful[]
}

model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  status        Status        @default(ACTIVE)
  description   String
  title         String
  url           String
  products      Product[]
  subcategories Subcategory[]
}

model Subcategory {
  id          String    @id @default(cuid())
  name        String
  url         String
  title       String
  description String
  status      Status    @default(ACTIVE)
  categoryId  String
  products    Product[]
  category    Category  @relation(fields: [categoryId], references: [id])
}

model Alternative {
  id          String    @id @default(cuid())
  name        String    @unique
  status      Status    @default(ACTIVE)
  description String
  title       String
  url         String
  logo        String
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id            String         @id @default(cuid())
  name          String
  slug          String         @unique
  headline      String
  rank          Int
  description   String
  logo          String
  releaseDate   String
  website       String
  twitter       String
  discord       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  status        Status         @default(PENDING)
  categoryId    String
  linkedin      String
  price         String
  promoCode     String
  promoExpire   String
  promoOffer    String
  suggestUrl    String
  tags          String[]
  banner        String?
  videoLink     String
  weburl        String
  isMaker       Boolean        @default(true)
  makers        String[]
  photos        String[]
  featured      Boolean        @default(false)
  top           Boolean        @default(false)
  verified      Boolean        @default(false)
  alternativeId String?
  subcategoryId String?
  priceOption   String
  averageRating Float?
  comments      Comment[]
  reviews       Review[]
  images        Image[]
  notification  Notification[]
  alternatives  Alternative[]
  category      Category       @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?   @relation(fields: [subcategoryId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  upvotes       Upvote[]
  views         Int            @default(0)

  @@index([userId])
  @@index([status])
}

model Image {
  id        String   @id @default(cuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Upvote {
  id        String   @id @default(cuid())
  productId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id             String           @id @default(cuid())
  profilePicture String
  productId      String
  userId         String
  body           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  replies        Json?
  helpful        Int              @default(0)
  product        Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id])
  helpfulUsers   CommentHelpful[]
}

model CommentHelpful {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([commentId, userId])
}

model Review {
  id             String          @id @default(cuid())
  profilePicture String
  productId      String
  userId         String
  body           String
  rating         Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  helpful        Int             @default(0) // Total helpful count
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id])
  helpfulUsers   ReviewHelpful[] // Relation to track users who marked it helpful
}

model ReviewHelpful {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([reviewId, userId]) // Ensure a user can only mark a review helpful once
}

model Notification {
  id             String             @id @default(cuid())
  userId         String
  body           String
  profilePicture String
  productId      String
  commentId      String?
  reviewId       String?
  type           NotificationType
  status         NotificationStatus @default(UNREAD)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  product        Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  user           User               @relation(fields: [userId], references: [id])
}

model Blog {
  id        String   @id @default(cuid())
  name      String?
  readtime  String?
  headline  String?
  desc      String?
  photos    String[]
  contents  Json?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
}

enum Status {
  PENDING
  ACTIVE
  REJECTED
}

enum NotificationStatus {
  UNREAD
  READ
}

enum NotificationType {
  UPVOTE
  COMMENT
  ACTIVATED
  REJECTED
  REVIEW
}
